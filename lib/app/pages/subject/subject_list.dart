// subject_list.dart
// Widget qui affiche une liste de sujets (cat√©gories ou feuilles) √† partir de Firestore
// Ce widget utilise FutureBuilder + StreamBuilder pour √©couter les changements dans la base de donn√©es hi√©rarchique Firestore.

import 'package:flutter/material.dart'; //  UI Flutter
import 'package:cloud_firestore/cloud_firestore.dart'; //  Firestore pour la gestion des donn√©es
import 'package:sapient/app/pages/subject/subject_tile.dart'; //  Widget qui affiche chaque sujet
import 'package:sapient/services/firestore/subjects_service.dart'; //  Service Firestore pour r√©cup√©rer les sujets

// Active ou d√©sactive les logs pour la liste des sujets
const bool kEnableSubjectListLogs = false;

//  Log conditionnel pour la liste des sujets
void logSubjectList(String message) {
  if (kEnableSubjectListLogs) {
    print('[SubjectList] $message'); // Affiche le message si les logs sont activ√©s
  }
}

///  Widget qui affiche une liste de sujets (cat√©gories ou feuilles) √† partir de Firestore
/// Utilise un FutureBuilder pour attendre l‚Äôacc√®s √† la bonne collection, puis un StreamBuilder pour √©couter les sujets en temps r√©el.
class SubjectList extends StatelessWidget {
  final int level; //  Niveau dans la hi√©rarchie (0 = racine)
  final List<String> parentPathIds; //  Liste des ID des parents pour d√©finir le chemin

  // Constructeur pour initialiser les param√®tres : niveau et chemin des parents
  const SubjectList({
    super.key, //  Cl√© pour le widget
    required this.level, //  Le niveau dans l'arborescence des sujets
    required this.parentPathIds, //  Le chemin complet des parents
  });

  // Fonction build pour cr√©er l'interface utilisateur du widget
  @override
  Widget build(BuildContext context) {
    //  Log pour savoir qu'on appelle la m√©thode build de SubjectList
    logSubjectList(' Construction de la liste des sujets pour le niveau $level avec chemin ${parentPathIds.toString()}');

    //  FutureBuilder ‚Üí on attend d‚Äôabord que le service Firestore retourne un Stream valide
    return FutureBuilder<Stream<QuerySnapshot>>(
      future: FirestoreSubjectsService().getSubjectsAtLevel(level, parentPathIds), //  R√©cup√®re un Future<Stream> selon le niveau
      builder: (context, futureSnapshot) {
        // ‚è± Si la future t√¢che n'est pas encore termin√©e (chargement)
        if (futureSnapshot.connectionState != ConnectionState.done) {
          logSubjectList(' En attente de r√©cup√©ration du flux Firestore...');
          return const Center(child: CircularProgressIndicator());
        }

        //  Si le Future √©choue
        if (futureSnapshot.hasError) {
          logSubjectList(' Erreur Future : ${futureSnapshot.error}');
          return Center(child: Text('Erreur : ${futureSnapshot.error}'));
        }

        // Future r√©solu ‚Üí on peut √©couter le Stream Firestore
        final stream = futureSnapshot.data!;

        // üì° StreamBuilder ‚Üí √©coute les documents dans la collection r√©cup√©r√©e
        return StreamBuilder<QuerySnapshot>(
          stream: stream, //  Flux Firestore de la bonne collection
          builder: (context, snapshot) {
            //  Si le stream est en attente de donn√©es (chargement)
            if (snapshot.connectionState == ConnectionState.waiting) {
              logSubjectList('Chargement des sujets (stream)...');
              return const Center(child: CircularProgressIndicator()); // Afficher un loader pendant le chargement
            }

            // Ô∏è Si une erreur est survenue lors de la r√©cup√©ration des donn√©es
            if (snapshot.hasError) {
              logSubjectList('Ô∏è Erreur lors du chargement des sujets : ${snapshot.error}');
              return Center(child: Text('Erreur : ${snapshot.error}')); // Afficher l'erreur
            }

            // Si aucune donn√©e n'a √©t√© r√©cup√©r√©e (liste vide)
            if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
              logSubjectList(' Aucun sujet trouv√©.');
              return const Center(child: Text("Aucun sujet")); // Afficher un message si aucun sujet n'est trouv√©
            }

            // Si des sujets ont √©t√© r√©cup√©r√©s, on les affiche
            final subjects = snapshot.data!.docs; // R√©cup√©rer la liste des sujets
            logSubjectList('${subjects.length} sujet(s) trouv√©(s)');

            // Retourner la liste des sujets dans un ListView
            return ListView.separated(
              padding: const EdgeInsets.all(16), //  Ajouter un padding autour de la liste
              itemCount: subjects.length, // Nombre d'√©l√©ments dans la liste
              separatorBuilder: (_, __) => const SizedBox(height: 8), // Espacement entre chaque sujet
              itemBuilder: (context, index) {
                //  Extraire chaque sujet depuis la liste des documents Firestore
                final doc = subjects[index];
                final subjectName = doc['name']; // üè∑ R√©cup√©rer le nom du sujet
                final isCategory = doc['isCategory'] ?? false; //  V√©rifier si le sujet est une cat√©gorie (par d√©faut false)

                //  Afficher le sujet dans un SubjectTile
                return SubjectTile(
                  subjectId: doc.id, //  ID du sujet
                  subjectName: subjectName, //  Nom du sujet
                  isCategory: isCategory, //  Type de sujet (cat√©gorie ou feuille)
                  level: level, //  Niveau du sujet
                  parentPathIds: parentPathIds, //  Chemin des sujets parents
                );
              },
            );
          },
        );
      },
    );
  }
}
